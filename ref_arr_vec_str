(define (ref arg . index-new) ;;; индекс и замена элемента по нему же, с возвратом того же типа
  (define (transform-in-list arg)
    (if (string? arg)
        (string->list arg)
        (if (vector? arg)
            (vector->list arg)
            arg)))
  (define (func-list->type? arg)
    (if (string? arg)
        (string->list)
        (if (vector? arg)
            (vector->list)
            (lambda (x . xs) (car(append (list x) xs))))))
  (define (ref-1 xs index)
    (if (> index (- (length xs) 1))
        (< index (length xs));#f
        (if (= index 0)
            (car xs)
            (ref-1 (cdr xs) (- index 1)))))
  (define (ref-2 xs index replace list->old-type res)
    (if (> index (- (length xs) 1))
        (< index (length xs));#f
        (if (= index 0)
            (list->old-type (append res (list replace) (cdr xs)))
            (ref-2 (cdr xs) (- index 1) replace list->old-type (append res (list (car xs)))))))
  (if (and (not (list? arg)) (not (vector? arg)) (not (string? arg)))
      (display "wrong input")
      (if ( = (length index-new) 1)
          (ref-1 (transform-in-list arg) (car index-new))
          (if (pair? index-new)
              (ref-2 (transform-in-list arg) (car index-new) (car (cdr index-new)) (func-list->type? arg) '())
              (display "Wrong input")))))
