;;
(define counter 0)
(define(next)
  (set! counter (+ 1 counter))
  counter)
;;1
(define-syntax trace-ex
  (syntax-rules ()
    ((trace-ex expr)
     (begin (write 'expr)
            (display " => ")
            (let ((x expr))
              (write x)
              (newline)
              x)))))
;;2 run-test принимает только 1 переменную тест
(define (if-mistake expr arg)
  (display "fail")
  (newline)
  (display "Expected:")
  (write arg)
  (newline)
  (display "Returned:")
  (if (procedure? expr)
      (write (expr arg))
      (write expr)))
(define (ok)
  (display " ok")
  (newline))
(define (run-test expr arg)
  (write 'expr)
  (if (procedure? expr)
      (if (eqv? (expr arg) arg)
          (ok)
          (if-mistake expr arg))
      (if (eqv? expr arg)
          (ok)
          (if-mistake expr arg))))
(define (run-tests expr args)
  (map (lambda (x) (run-test expr x)) args))
#|
  (set! counter 5)
(define next-tests
    (list (test (next) 6)
          (test (next) 8)
          (test (next) 8)))
|#     
(define-syntax test
  (syntax-rules ()
    ((test expr args)
     (begin (if (list? args)
                (run-tests expr (list args))
                (run-test expr args))))))